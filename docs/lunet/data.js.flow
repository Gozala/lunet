// @flow strict

export type Body = null | string | ArrayBuffer | Object

export type EncodedRequest = {|
  url: string,
  destination?: string,
  body: Body,
  cache?: CacheType,
  credentials?: CredentialsType,
  headers: Array<[string, string]>,
  integrity?: string,
  keepalive?: boolean,
  method?: string,
  mode?: ?ModeType,
  redirect?: RedirectType,
  referrer?: string,
  referrerPolicy?: ReferrerPolicyType,
  window?: null,

  port?: MessagePort
|}

// type ResponseMessage = { data: ResponseData }

export type ResponseData = ResponseHead | ResponseBody | ResponseCancel
type ResponseHead = {
  type: "head",
  head: {
    status: number,
    statusText: string,
    headers: Array<[string, string]>
  }
}
type ResponseBody = {
  type: "body",
  body: ?ArrayBuffer,
  done: boolean
}

type ResponseCancel = {
  type: "cancel",
  cancel?: any
}
export type EncodedResponse = {
  url: string,
  body: Body,
  status: number,
  statusText: string,
  headers: Array<[string, string]>,
  redirected: boolean,
  type: ResponseType
}

type Transferable = ArrayBuffer | MessagePort | ImageBitmap | null

export type ResponseMessage = {
  type: "response",
  id: string,
  response: EncodedResponse
}

export type LoadMessage = {
  type: "load",
  location: string,
  content: Body,
  contentType: string
}

export type RequestMessage = {
  type: "request",
  id: string,
  request: EncodedRequest
}

export type Response = {
  type: "message",
  data: ResponseMessage,
  ports: MessagePort[],
  source: ServiceWorker
}

export type Load = {
  type: "message",
  data: LoadMessage
}

export interface Request {
  type: "message";
  +data: RequestMessage;
  ports: MessagePort[];
  target: MessagePort;
  origin: string;
}

export type WorkerInbox = {
  type: "message",
  data: WorkerIncomingMessage,
  target: MessagePort,
  origin: string
}

export type WorkerOutbox = {
  type: "message",
  data: WorkerOutgoingMessage,
  target: MessagePort,
  origin: string
}

export type PingMessage = {
  type: "ping"
}

export type PongMessage = {
  type: "pong"
}

export type ConnectMessage = {
  type: "connect"
}

export type WorkerIncomingMessage =
  | RequestMessage
  | PingMessage
  | ResponseMessage

export type WorkerOutgoingMessage =
  | ResponseMessage
  | PongMessage
  | RequestMessage

export interface HashChangeEvent extends Event {
  newURL: string;
  oldURL: string;
}

export interface PopStateEvent extends Event {
  state: Object;
}

export type HashChangeMessage = {
  type: "hashchange",
  hashchange: HashChangeData
}

export type HashChangeData = {
  newURL: string,
  oldURL: string
}
export type PopStateMessage = {
  type: " popstate",
  popstate: PopStateData
}

export type PopStateData = {
  newURL: string,
  href: string,
  title: string,
  state: Object
}

export type PushStateMessage = {
  type: " pushstate",
  pushstate: PopStateData
}

export type ReplaceStateMessage = {
  type: " pushstate",
  pushstate: PopStateData
}
export type BeforeUnloadMessage = {
  type: "beforeunload",
  beforeunload: null
}

export interface AgentInbox {
  +data: AgentIncomingMessage;
  ports: MessagePort[];
  target: MessagePort;
  origin: string;
}

export interface ClientInbox {
  +data: ClientIncomingMessage;
  ports: MessagePort[];
  target: MessagePort;
  origin: string;
}

export type AgentIncomingMessage =
  | ConnectMessage
  | RequestMessage
  | HashChangeMessage
  | PopStateMessage
  | PushStateMessage
  | ReplaceStateMessage
  | BeforeUnloadMessage

export type ClientIncomingMessage = ResponseMessage | LoadMessage
